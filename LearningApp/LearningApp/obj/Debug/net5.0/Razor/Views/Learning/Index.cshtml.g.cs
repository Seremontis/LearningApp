#pragma checksum "D:\LearningApp\LearningApp\LearningApp\Views\Learning\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3a6758cc8878f1720b112442d92bf532cf915fb3"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Learning_Index), @"mvc.1.0.view", @"/Views/Learning/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\LearningApp\LearningApp\LearningApp\Views\_ViewImports.cshtml"
using LearningApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\LearningApp\LearningApp\LearningApp\Views\_ViewImports.cshtml"
using LearningApp.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3a6758cc8878f1720b112442d92bf532cf915fb3", @"/Views/Learning/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"f1b62e7198bdb0871c4ea4b7d1ae381afc06b8e4", @"/Views/_ViewImports.cshtml")]
    public class Views_Learning_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"<style>

body{
	font-size: 20px;
	font-family: 'Work Sans', sans-serif;
	color: #333;
  font-weight: 300;
  text-align: center;
  background-color: #f8f6f0;
}

h1{
  font-weight: 300;
  margin: 0px;
  padding: 10px;
  font-size: 20px;
  background-color: #444;
  color: #fff;
}

.question{
  font-size: 30px;
  margin-bottom: 10px;
}

.answers {
  margin-bottom: 20px;
  text-align: left;
  display: inline-block;
}

.answers label{
  display: block;
  margin-bottom: 10px;
}

button{
  font-family: 'Work Sans', sans-serif;
	font-size: 22px;
	background-color: #279;
	color: #fff;
	border: 0px;
	border-radius: 3px;
	padding: 20px;
	cursor: pointer;
	margin-bottom: 20px;
}

button:hover{
	background-color: #38a;
}

.slide{
  position: absolute;
  left: 0px;
  top: 0px;
  width: 100%;
  z-index: 1;
  opacity: 0;
  transition: opacity 0.5s;
}

.active-slide{
  opacity: 1;
  z-index: 2;
}

.quiz-container{
  position: relative;
  height: 200px;
  mar");
            WriteLiteral(@"gin-top: 40px;
}

</style>
    <h1 > Quiz on Important Facts</h1 >
    <div class=""quiz-container"" >
    <div id=""quiz"" > </div >
    </div >
    <button id=""previous"" > Previous Question</button >
    <button id=""next"" > Next Question</button >
    <button id=""submit"" > Submit Quiz</button >
    <div id=""results"" >
        
    </div >



    <script>
        (function () {
            // Functions
            function buildQuiz() {
                // variable to store the HTML output
                const output = [];

                // for each question...
                myQuestions.forEach(
                    (currentQuestion, questionNumber) => {

                        // variable to store the list of possible answers
                        const answers = [];

                        // and for each available answer...
                        for (letter in currentQuestion.answers) {

                            // ...add an HTML radio button
                    ");
            WriteLiteral(@"        answers.push(
                                `<label>
              <input type=""radio"" name=""question${questionNumber}"" value=""${letter}"">
              ${letter} :
              ${currentQuestion.answers[letter]}
            </label>`
                            );
                        }

                        // add this question and its answers to the output
                        output.push(
                            `<div class=""slide"">
            <div class=""question""> ${currentQuestion.question} </div>
            <div class=""answers""> ${answers.join("""")} </div>
          </div>`
                        );
                    }
                );

                // finally combine our output list into one string of HTML and put it on the page
                quizContainer.innerHTML = output.join('');
            }

            function showResults() {

                // gather answer containers from our quiz
                const answerContainers = quizCo");
            WriteLiteral(@"ntainer.querySelectorAll('.answers');

                // keep track of user's answers
                let numCorrect = 0;

                // for each question...
                myQuestions.forEach((currentQuestion, questionNumber) => {

                    // find selected answer
                    const answerContainer = answerContainers[questionNumber];
                    const selector = `input[name=question${questionNumber}]:checked`;
                    const userAnswer = (answerContainer.querySelector(selector) || {}).value;

                    // if answer is correct
                    if (userAnswer === currentQuestion.correctAnswer) {
                        // add to the number of correct answers
                        numCorrect++;

                        // color the answers green
                        answerContainers[questionNumber].style.color = 'lightgreen';
                    }
                    // if answer is wrong or blank
                    else {
   ");
            WriteLiteral(@"                     // color the answers red
                        answerContainers[questionNumber].style.color = 'red';
                    }
                });

                // show number of correct answers out of total
                resultsContainer.innerHTML = `${numCorrect} out of ${myQuestions.length}`;
            }

            function showSlide(n) {
                slides[currentSlide].classList.remove('active-slide');
                slides[n].classList.add('active-slide');
                currentSlide = n;
                if (currentSlide === 0) {
                    previousButton.style.display = 'none';
                }
                else {
                    previousButton.style.display = 'inline-block';
                }
                if (currentSlide === slides.length - 1) {
                    nextButton.style.display = 'none';
                    submitButton.style.display = 'inline-block';
                }
                else {
                    ");
            WriteLiteral(@"nextButton.style.display = 'inline-block';
                    submitButton.style.display = 'none';
                }
            }

            function showNextSlide() {
                showSlide(currentSlide + 1);
            }

            function showPreviousSlide() {
                showSlide(currentSlide - 1);
            }

            // Variables
            const quizContainer = document.getElementById('quiz');
            const resultsContainer = document.getElementById('results');
            const submitButton = document.getElementById('submit');
            const myQuestions = [
                {
                    question: ""Who invented JavaScript?"",
                    answers: {
                        a: ""Douglas Crockford"",
                        b: ""Sheryl Sandberg"",
                        c: ""Brendan Eich""
                    },
                    correctAnswer: ""c""
                },
                {
                    question: ""Which one of these is");
            WriteLiteral(@" a JavaScript package manager?"",
                    answers: {
                        a: ""Node.js"",
                        b: ""TypeScript"",
                        c: ""npm""
                    },
                    correctAnswer: ""c""
                },
                {
                    question: ""Which tool can you use to ensure code quality?"",
                    answers: {
                        a: ""Angular"",
                        b: ""jQuery"",
                        c: ""RequireJS"",
                        d: ""ESLint""
                    },
                    correctAnswer: ""d""
                }
            ];

            // Kick things off
            buildQuiz();

            // Pagination
            const previousButton = document.getElementById(""previous"");
            const nextButton = document.getElementById(""next"");
            const slides = document.querySelectorAll("".slide"");
            let currentSlide = 0;

            // Show the first slide
       ");
            WriteLiteral(@"     showSlide(currentSlide);

            // Event listeners
            submitButton.addEventListener('click', showResults);
            previousButton.addEventListener(""click"", showPreviousSlide);
            nextButton.addEventListener(""click"", showNextSlide);
        })();

    </script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
